// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/erigontech/erigon/cl/phase1/network/services (interfaces: BatchSignatureVerifierInterface)
//
// Generated by this command:
//
//	mockgen -typed=true -destination=./batch_signature_verifier_mock.go -package=services . BatchSignatureVerifierInterface
//

// Package services is a generated GoMock package.
package services

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBatchSignatureVerifierInterface is a mock of BatchSignatureVerifierInterface interface.
type MockBatchSignatureVerifierInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBatchSignatureVerifierInterfaceMockRecorder
	isgomock struct{}
}

// MockBatchSignatureVerifierInterfaceMockRecorder is the mock recorder for MockBatchSignatureVerifierInterface.
type MockBatchSignatureVerifierInterfaceMockRecorder struct {
	mock *MockBatchSignatureVerifierInterface
}

// NewMockBatchSignatureVerifierInterface creates a new mock instance.
func NewMockBatchSignatureVerifierInterface(ctrl *gomock.Controller) *MockBatchSignatureVerifierInterface {
	mock := &MockBatchSignatureVerifierInterface{ctrl: ctrl}
	mock.recorder = &MockBatchSignatureVerifierInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchSignatureVerifierInterface) EXPECT() *MockBatchSignatureVerifierInterfaceMockRecorder {
	return m.recorder
}

// AsyncVerifyAggregateProof mocks base method.
func (m *MockBatchSignatureVerifierInterface) AsyncVerifyAggregateProof(data *AggregateVerificationData) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AsyncVerifyAggregateProof", data)
}

// AsyncVerifyAggregateProof indicates an expected call of AsyncVerifyAggregateProof.
func (mr *MockBatchSignatureVerifierInterfaceMockRecorder) AsyncVerifyAggregateProof(data any) *MockBatchSignatureVerifierInterfaceAsyncVerifyAggregateProofCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncVerifyAggregateProof", reflect.TypeOf((*MockBatchSignatureVerifierInterface)(nil).AsyncVerifyAggregateProof), data)
	return &MockBatchSignatureVerifierInterfaceAsyncVerifyAggregateProofCall{Call: call}
}

// MockBatchSignatureVerifierInterfaceAsyncVerifyAggregateProofCall wrap *gomock.Call
type MockBatchSignatureVerifierInterfaceAsyncVerifyAggregateProofCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBatchSignatureVerifierInterfaceAsyncVerifyAggregateProofCall) Return() *MockBatchSignatureVerifierInterfaceAsyncVerifyAggregateProofCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBatchSignatureVerifierInterfaceAsyncVerifyAggregateProofCall) Do(f func(*AggregateVerificationData)) *MockBatchSignatureVerifierInterfaceAsyncVerifyAggregateProofCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBatchSignatureVerifierInterfaceAsyncVerifyAggregateProofCall) DoAndReturn(f func(*AggregateVerificationData)) *MockBatchSignatureVerifierInterfaceAsyncVerifyAggregateProofCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AsyncVerifyAttestation mocks base method.
func (m *MockBatchSignatureVerifierInterface) AsyncVerifyAttestation(data *AggregateVerificationData) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AsyncVerifyAttestation", data)
}

// AsyncVerifyAttestation indicates an expected call of AsyncVerifyAttestation.
func (mr *MockBatchSignatureVerifierInterfaceMockRecorder) AsyncVerifyAttestation(data any) *MockBatchSignatureVerifierInterfaceAsyncVerifyAttestationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncVerifyAttestation", reflect.TypeOf((*MockBatchSignatureVerifierInterface)(nil).AsyncVerifyAttestation), data)
	return &MockBatchSignatureVerifierInterfaceAsyncVerifyAttestationCall{Call: call}
}

// MockBatchSignatureVerifierInterfaceAsyncVerifyAttestationCall wrap *gomock.Call
type MockBatchSignatureVerifierInterfaceAsyncVerifyAttestationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBatchSignatureVerifierInterfaceAsyncVerifyAttestationCall) Return() *MockBatchSignatureVerifierInterfaceAsyncVerifyAttestationCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBatchSignatureVerifierInterfaceAsyncVerifyAttestationCall) Do(f func(*AggregateVerificationData)) *MockBatchSignatureVerifierInterfaceAsyncVerifyAttestationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBatchSignatureVerifierInterfaceAsyncVerifyAttestationCall) DoAndReturn(f func(*AggregateVerificationData)) *MockBatchSignatureVerifierInterfaceAsyncVerifyAttestationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AsyncVerifyBlsToExecutionChange mocks base method.
func (m *MockBatchSignatureVerifierInterface) AsyncVerifyBlsToExecutionChange(data *AggregateVerificationData) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AsyncVerifyBlsToExecutionChange", data)
}

// AsyncVerifyBlsToExecutionChange indicates an expected call of AsyncVerifyBlsToExecutionChange.
func (mr *MockBatchSignatureVerifierInterfaceMockRecorder) AsyncVerifyBlsToExecutionChange(data any) *MockBatchSignatureVerifierInterfaceAsyncVerifyBlsToExecutionChangeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncVerifyBlsToExecutionChange", reflect.TypeOf((*MockBatchSignatureVerifierInterface)(nil).AsyncVerifyBlsToExecutionChange), data)
	return &MockBatchSignatureVerifierInterfaceAsyncVerifyBlsToExecutionChangeCall{Call: call}
}

// MockBatchSignatureVerifierInterfaceAsyncVerifyBlsToExecutionChangeCall wrap *gomock.Call
type MockBatchSignatureVerifierInterfaceAsyncVerifyBlsToExecutionChangeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBatchSignatureVerifierInterfaceAsyncVerifyBlsToExecutionChangeCall) Return() *MockBatchSignatureVerifierInterfaceAsyncVerifyBlsToExecutionChangeCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBatchSignatureVerifierInterfaceAsyncVerifyBlsToExecutionChangeCall) Do(f func(*AggregateVerificationData)) *MockBatchSignatureVerifierInterfaceAsyncVerifyBlsToExecutionChangeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBatchSignatureVerifierInterfaceAsyncVerifyBlsToExecutionChangeCall) DoAndReturn(f func(*AggregateVerificationData)) *MockBatchSignatureVerifierInterfaceAsyncVerifyBlsToExecutionChangeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ImmediateVerification mocks base method.
func (m *MockBatchSignatureVerifierInterface) ImmediateVerification(data *AggregateVerificationData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImmediateVerification", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImmediateVerification indicates an expected call of ImmediateVerification.
func (mr *MockBatchSignatureVerifierInterfaceMockRecorder) ImmediateVerification(data any) *MockBatchSignatureVerifierInterfaceImmediateVerificationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImmediateVerification", reflect.TypeOf((*MockBatchSignatureVerifierInterface)(nil).ImmediateVerification), data)
	return &MockBatchSignatureVerifierInterfaceImmediateVerificationCall{Call: call}
}

// MockBatchSignatureVerifierInterfaceImmediateVerificationCall wrap *gomock.Call
type MockBatchSignatureVerifierInterfaceImmediateVerificationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBatchSignatureVerifierInterfaceImmediateVerificationCall) Return(arg0 error) *MockBatchSignatureVerifierInterfaceImmediateVerificationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBatchSignatureVerifierInterfaceImmediateVerificationCall) Do(f func(*AggregateVerificationData) error) *MockBatchSignatureVerifierInterfaceImmediateVerificationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBatchSignatureVerifierInterfaceImmediateVerificationCall) DoAndReturn(f func(*AggregateVerificationData) error) *MockBatchSignatureVerifierInterfaceImmediateVerificationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
