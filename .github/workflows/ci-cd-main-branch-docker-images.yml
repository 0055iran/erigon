name: CI-CD build and deploy docker images based on the last commit in the main branch
run-name: "Commit id ${{ github.sha }}: CI-CD build and deploy docker images based on the commit id in the main branch"

env:
  APPLICATION: "erigon"
  BUILDER_IMAGE: "golang:1.22-bookworm"
  APP_REPO: "erigontech/erigon"
  PACKAGE: "github.com/erigontech/erigon"
  TARGET_BASE_IMAGE: "debian:12.7-slim"
  LABEL_DESCRIPTION: "[docker image built on a last commit id from the ref branch] Erigon is an implementation of Ethereum (execution layer with embeddable consensus layer), on the efficiency frontier. Archive Node by default."
  KEEP_IMAGES: 100

on:
  push:
    branches:
      - 'release/2.61'
    paths-ignore:
      - '.github/**'
  workflow_dispatch:

jobs:
  define_matrix:
    runs-on: ubuntu-latest
    outputs:
      os: ${{ steps.os.outputs.os }}

    steps:
     - name: Define os
       id: os
       run: echo 'os=ubuntu-latest' >> "$GITHUB_OUTPUT"

  Build:
    needs: define_matrix
    runs-on: ${{ needs.define_matrix.outputs.os }}
    timeout-minutes: 45
    outputs:
      docker_build_tag: ${{ steps.built_tag_export.outputs.docker_build_tag }}

    steps:
      - name: Fast checkout git repository
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 ## 4.1.7 release
        with:
          repository: ${{ env.APP_REPO }}
          fetch-depth: 1
          ref: ${{ github.ref_name }}
          path: 'erigon'

      - name: Setup go env and cache
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.22'
          go-version-file: 'erigon/go.mod'
          cache-dependency-path: |
            erigon/go.sum

      - name: Get commit id
        id: getCommitId
        run: |
          cd erigon
          echo "id=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "short_commit_id=$(git rev-parse --short=7 HEAD)" >> $GITHUB_OUTPUT
          echo "week_of_the_year=$(/bin/date -u "+%Y-%W")" >> $GITHUB_OUTPUT
          cd ..

      - name: Set up QEMU
        uses: docker/setup-qemu-action@49b3bc8e6bdd4a60e6116a5414239cba5943d3cf ## v3.2.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@988b5a0280414f521da01fcc63a27aeeb4b104db ## v3.6.1

      - name: Setup GO build and pkg cache for one week only
        id: cache
        uses: actions/cache@v4
        with:
          key: cache-year-week-${{ steps.getCommitId.outputs.week_of_the_year }}-go.mod-hash:${{ hashFiles('erigon/go.mod') }}
          path: |
            ~/go/pkg
            ~/.cache

      # - name: Build for linux/arm64
      #   run: >
      #     docker run --platform linux/arm64
      #     --rm
      #     -v $(pwd)/erigon:/erigon:ro
      #     -v ${GITHUB_WORKSPACE}/build-arm64:/erigon-build
      #     -v ${HOME}/.cache:/root/.cache
      #     -v ${HOME}/go/pkg/mod:/go/pkg/mod
      #     -w /erigon --entrypoint /bin/bash
      #     ${{ env.BUILDER_IMAGE }}
      #     -c "git config --global --add safe.directory /erigon;
      #     make GOARCH=arm64 GOBIN=/erigon-build BUILD_TAGS=nosqlite,noboltdb,nosilkworm 
      #     erigon downloader devnet evm caplin diag integration rpcdaemon sentry txpool"

      - name: Build for linux/amd64
        run: >
          docker run --platform linux/amd64
          --rm
          -v $(pwd)/erigon:/erigon:ro
          -v ${GITHUB_WORKSPACE}/build-amd64:/erigon-build
          -v ${HOME}/.cache:/root/.cache
          -v ${HOME}/go/pkg/mod:/go/pkg/mod
          -w /erigon --entrypoint /bin/bash
          ${{ env.BUILDER_IMAGE }}
          -c "git config --global --add safe.directory /erigon;
          make GOARCH=amd64 GOAMD64=v1 GOBIN=/erigon-build BUILD_TAGS=nosqlite,noboltdb 
          erigon downloader devnet evm caplin diag integration rpcdaemon sentry txpool;
          find / -name libsilkworm_capi.so -exec install {} /erigon-build \; "

      - name: Create archives and checksums
        env:
          RELEASE_VERSION: "local-${{ steps.getCommitId.outputs.short_commit_id }}"
        run: |
          cd ${GITHUB_WORKSPACE}
          mkdir $GITHUB_WORKSPACE/release
          for dir in build-*; do
            cd $dir
            echo Current directory is $(pwd). Checksum file and archive will be created for this directory
            # sha256sum * > checksums.txt
            tar czvf $GITHUB_WORKSPACE/release/${APPLICATION}_${RELEASE_VERSION}_linux_$(echo $dir | sed 's,build-,,').tar.gz \
              --transform "s,^./,${APPLICATION}_${RELEASE_VERSION}_linux_$(echo $dir | sed 's,build-,,')/," .
            cd -
          done
          cd $GITHUB_WORKSPACE/release
          sha256sum * > ${APPLICATION}_${RELEASE_VERSION}_checksums.txt
          echo Content of release directory:
          find . -type f -ls
          
      - name: Build multi-platform docker image based on the commit id ${{ steps.getCommitId.outputs.short_commit_id }} in the ref branch
        env:
          BUILD_VERSION: "local-${{ steps.getCommitId.outputs.short_commit_id }}"
          DOCKERFILE_PATH: Dockerfile.release
        run: |
            cd ${GITHUB_WORKSPACE}/release
            echo "Current directory is $(pwd) ."
            docker build \
            --file ${{ github.workspace }}/erigon/${{ env.DOCKERFILE_PATH }} \
            --build-arg RELEASE_DOCKER_BASE_IMAGE=${{ env.TARGET_BASE_IMAGE }} \
            --build-arg VERSION=${{ env.BUILD_VERSION }} \
            --build-arg APPLICATION=${{ env.APPLICATION }} \
            --tag ${{ env.APPLICATION }}:${{ env.BUILD_VERSION }} \
            --tag ${{ env.APPLICATION }}:latest \
            --tag ${{ env.APPLICATION }} \
            --target release .

      - name: export and print docker build tag
        id: built_tag_export
        env:
          BUILD_VERSION: local-${{ steps.getCommitId.outputs.short_commit_id }}
        run: |
          echo "docker_build_tag=${{ env.APPLICATION }}:${{ env.BUILD_VERSION }}" >> $GITHUB_OUTPUT
          echo The following docker images have been published:
          echo "${{ env.APPLICATION }}:${{ env.BUILD_VERSION }}"
          echo "${{ env.APPLICATION }}:latest"
          echo "${{ env.APPLICATION }}"

  run-kurtosis-assertoor:
    needs: [define_matrix, Build]
    uses: erigontech/erigon/.github/workflows/test-kurtosis-assertoor.yml@feat/assertor-testing
    with:
      checkout_ref: ${{ github.sha }}
      os: ${{ needs.define_matrix.outputs.os }}
      docker_build_tag: ${{ needs.Build.outputs.docker_build_tag }}
