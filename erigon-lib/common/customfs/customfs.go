package customfs

import (
	"errors"
	"github.com/spf13/afero"
	"io"
	"os"
	"strconv"
	"strings"
	"syscall"
)

var CFS = CustomFileSystem{afero.NewOsFs()}

type CustomFileSystem struct {
	afero.Fs
}

type CustomFile struct {
	afero.File
}

func (fs *CustomFileSystem) IsNotExist(err error) bool {
	return underlyingErrorIs(err, afero.ErrFileNotFound)
}

func underlyingErrorIs(err, target error) bool {
	// Note that this function is not errors.Is:
	// underlyingError only unwraps the specific error-wrapping types
	// that it historically did, not all errors implementing Unwrap().
	err = underlyingError(err)
	if err == target {
		return true
	}
	// To preserve prior behavior, only examine syscall errors.
	e, ok := err.(syscallErrorType)
	return ok && e.Is(target)
}

// underlyingError returns the underlying error for known os error types.
func underlyingError(err error) error {
	switch err := err.(type) {
	case *os.PathError:
		return err.Err
	case *os.LinkError:
		return err.Err
	case *os.SyscallError:
		return err.Err
	}
	return err
}

type syscallErrorType = syscall.Errno

func (fs *CustomFileSystem) Create(name string) (*CustomFile, error) {
	file, err := fs.Fs.Create(name)
	return &CustomFile{file}, err
}

func (f *CustomFile) ReadFrom(r io.Reader) (n int64, err error) {
	if err := f.checkValid("write"); err != nil {
		return 0, err
	}
	return genericReadFrom(f, r) // without wrapping
}

func genericReadFrom(f *CustomFile, r io.Reader) (int64, error) {
	return io.Copy(fileWithoutReadFrom{CustomFile: f}, r)
}

// noReadFrom can be embedded alongside another type to
// hide the ReadFrom method of that other type.
type noReadFrom struct{}

// ReadFrom hides another ReadFrom method.
// It should never be called.
func (noReadFrom) ReadFrom(io.Reader) (int64, error) {
	panic("can't happen")
}

// fileWithoutReadFrom implements all the methods of *File other
// than ReadFrom. This is used to permit ReadFrom to call io.Copy
// without leading to a recursive call to ReadFrom.
type fileWithoutReadFrom struct {
	noReadFrom
	*CustomFile
}

func (f *CustomFile) checkValid(op string) error {
	if f == nil {
		return os.ErrInvalid
	}
	return nil
}

// MkdirTemp creates a new temporary directory in the directory dir
// and returns the pathname of the new directory.
// The new directory's name is generated by adding a random string to the end of pattern.
// If pattern includes a "*", the random string replaces the last "*" instead.
// The directory is created with mode 0o700 (before umask).
// If dir is the empty string, MkdirTemp uses the default directory for temporary files, as returned by TempDir.
// Multiple programs or goroutines calling MkdirTemp simultaneously will not choose the same directory.
// It is the caller's responsibility to remove the directory when it is no longer needed.
func (fs *CustomFileSystem) MkdirTemp(dir, pattern string) (string, error) {
	if _, ok := fs.Fs.(*afero.OsFs); ok {
		return os.MkdirTemp(dir, pattern)
	}
	if dir == "" {
		dir = "tmp"
	}

	prefix, suffix, err := prefixAndSuffix(pattern)
	if err != nil {
		return "", &os.PathError{Op: "mkdirtemp", Path: pattern, Err: err}
	}
	prefix = joinPath(dir, prefix)

	try := 0
	for i := 0; ; i++ {
		name := prefix + strconv.Itoa(i) + suffix
		err := fs.Mkdir(name, 0700)
		if err == nil {
			return name, nil
		}
		if fs.IsExist(err) {
			if try++; try < 10000 {
				continue
			}
			return "", &os.PathError{Op: "mkdirtemp", Path: dir, Err: os.ErrExist}
		}
		if fs.IsNotExist(err) {
			if _, err := fs.Stat(dir); fs.IsNotExist(err) {
				return "", err
			}
		}
		return "", err
	}
}

func (fs *CustomFileSystem) IsExist(err error) bool {
	return underlyingErrorIs(err, os.ErrExist)
}

// prefixAndSuffix splits pattern by the last wildcard "*", if applicable,
// returning prefix as the part before "*" and suffix as the part after "*".
func prefixAndSuffix(pattern string) (prefix, suffix string, err error) {
	for i := 0; i < len(pattern); i++ {
		if os.IsPathSeparator(pattern[i]) {
			return "", "", errors.New("separator")
		}
	}
	if pos := strings.LastIndexByte(pattern, '*'); pos != -1 {
		prefix, suffix = pattern[:pos], pattern[pos+1:]
	} else {
		prefix = pattern
	}
	return prefix, suffix, nil
}

func joinPath(dir, name string) string {
	if len(dir) > 0 && os.IsPathSeparator(dir[len(dir)-1]) {
		return dir + name
	}
	return dir + string(os.PathSeparator) + name
}
